import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/expense_provider.dart';
import '../models/expense.dart';

class EditExpenseScreen extends StatefulWidget {
  final Expense expense;
  
  const EditExpenseScreen({
    super.key,
    required this.expense,
  });

  @override
  State<EditExpenseScreen> createState() => _EditExpenseScreenState();
}

class _EditExpenseScreenState extends State<EditExpenseScreen> {
  late TextEditingController _amountController;
  late String _category;
  late bool _isIncome;
  String? _errorMessage;

  final Map<String, List<String>> _categories = {
    '–†–∞—Å—Ö–æ–¥—ã': [
      '–ü—Ä–æ–¥—É–∫—Ç—ã',
      '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã',
      '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
      '–ó–¥–æ—Ä–æ–≤—å–µ',
      '–û–¥–µ–∂–¥–∞',
      '–î–æ–º',
      '–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç',
      '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      '–•–æ–±–±–∏',
      '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
      '–ü–æ–¥–∞—Ä–∫–∏',
      '–ü—Ä–æ—á–µ–µ',
    ],
    '–î–æ—Ö–æ–¥—ã': [
      '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      '–§—Ä–∏–ª–∞–Ω—Å',
      '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
      '–ü–æ–¥–∞—Ä–∫–∏',
      '–í–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞',
      '–ü—Ä–æ—á–µ–µ',
    ],
  };

  String _getCategoryIcon(String category) {
    switch (category.toLowerCase()) {
      case '–ø—Ä–æ–¥—É–∫—Ç—ã':
        return 'üõí';
      case '–∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã':
        return 'üçΩÔ∏è';
      case '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç':
        return 'üöó';
      case '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è':
        return 'üéÆ';
      case '–∑–¥–æ—Ä–æ–≤—å–µ':
        return 'üè•';
      case '–æ–¥–µ–∂–¥–∞':
        return 'üëï';
      case '–¥–æ–º':
        return 'üè†';
      case '—Å–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç':
        return 'üì±';
      case '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ':
        return 'üìö';
      case '—Ö–æ–±–±–∏':
        return 'üé®';
      case '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è':
        return '‚úàÔ∏è';
      case '–ø–æ–¥–∞—Ä–∫–∏':
        return 'üéÅ';
      case '–∑–∞—Ä–ø–ª–∞—Ç–∞':
        return 'üí∞';
      case '—Ñ—Ä–∏–ª–∞–Ω—Å':
        return 'üíª';
      case '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏':
        return 'üìà';
      case '–≤–æ–∑–≤—Ä–∞—Ç –¥–æ–ª–≥–∞':
        return 'üîÑ';
      default:
        return 'üìù';
    }
  }

  @override
  void initState() {
    super.initState();
    _amountController = TextEditingController(
      text: widget.expense.amount.toString(),
    );
    _category = widget.expense.category;
    _isIncome = widget.expense.isIncome;
  }

  void _updateExpense() {
    try {
      final amount = double.tryParse(_amountController.text);
      if (amount == null || amount <= 0) {
        setState(() {
          _errorMessage = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
        });
        return;
      }

      final updatedExpense = Expense(
        id: widget.expense.id,
        category: _category,
        amount: amount,
        date: widget.expense.date,
        isIncome: _isIncome,
      );

      Provider.of<ExpenseProvider>(context, listen: false)
          .updateExpense(updatedExpense);
      Navigator.pop(context);
    } catch (e) {
      setState(() {
        _errorMessage = '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_isIncome ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥'),
        elevation: 0,
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            Container(
              width: double.infinity,
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.primaryContainer,
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(32),
                  bottomRight: Radius.circular(32),
                ),
              ),
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  Container(
                    width: 80,
                    height: 80,
                    decoration: BoxDecoration(
                      color: Theme.of(context).colorScheme.primary.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(40),
                    ),
                    child: Center(
                      child: Text(
                        _getCategoryIcon(_category),
                        style: const TextStyle(fontSize: 40),
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  SegmentedButton<bool>(
                    segments: const [
                      ButtonSegment<bool>(
                        value: false,
                        label: Text('–†–∞—Å—Ö–æ–¥'),
                        icon: Icon(Icons.remove_circle_outline),
                      ),
                      ButtonSegment<bool>(
                        value: true,
                        label: Text('–î–æ—Ö–æ–¥'),
                        icon: Icon(Icons.add_circle_outline),
                      ),
                    ],
                    selected: {_isIncome},
                    onSelectionChanged: (Set<bool> selected) {
                      setState(() {
                        _isIncome = selected.first;
                        _category = _categories[_isIncome ? '–î–æ—Ö–æ–¥—ã' : '–†–∞—Å—Ö–æ–¥—ã']!.first;
                      });
                    },
                  ),
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–°—É–º–º–∞',
                            style: Theme.of(context).textTheme.titleMedium,
                          ),
                          const SizedBox(height: 8),
                          TextField(
                            controller: _amountController,
                            keyboardType: TextInputType.number,
                            decoration: InputDecoration(
                              filled: true,
                              fillColor: Theme.of(context).colorScheme.surface,
                              prefixIcon: const Icon(Icons.currency_ruble),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                              errorText: _errorMessage,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16),
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                            style: Theme.of(context).textTheme.titleMedium,
                          ),
                          const SizedBox(height: 16),
                          Wrap(
                            spacing: 8,
                            runSpacing: 8,
                            children: _categories[_isIncome ? '–î–æ—Ö–æ–¥—ã' : '–†–∞—Å—Ö–æ–¥—ã']!
                                .map((category) {
                              final isSelected = category == _category;
                              return FilterChip(
                                label: Row(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    Text(_getCategoryIcon(category)),
                                    const SizedBox(width: 8),
                                    Text(category),
                                  ],
                                ),
                                selected: isSelected,
                                onSelected: (selected) {
                                  setState(() {
                                    _category = category;
                                  });
                                },
                              );
                            }).toList(),
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 32),
                  ElevatedButton(
                    onPressed: _updateExpense,
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.all(16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _amountController.dispose();
    super.dispose();
  }
} 